package lesson2;

import kotlin.NotImplementedError;
import kotlin.Pair;

import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unused")
public class JavaAlgorithms {
    /**
     * Получение наибольшей прибыли (она же -- поиск максимального подмассива)
     * Простая
     *
     * Во входном файле с именем inputName перечислены цены на акции компании в различные (возрастающие) моменты времени
     * (каждая цена идёт с новой строки). Цена -- это целое положительное число. Пример:
     *
     * 201
     * 196
     * 190
     * 198
     * 187
     * 194
     * 193
     * 185
     *
     * Выбрать два момента времени, первый из них для покупки акций, а второй для продажи, с тем, чтобы разница
     * между ценой продажи и ценой покупки была максимально большой. Второй момент должен быть раньше первого.
     * Вернуть пару из двух моментов.
     * Каждый момент обозначается целым числом -- номер строки во входном файле, нумерация с единицы.
     * Например, для приведённого выше файла результат должен быть Pair(3, 4)
     *
     * В случае обнаружения неверного формата файла бросить любое исключение.
     */
    static public Pair<Integer, Integer> optimizeBuyAndSell(String inputName) {
        throw new NotImplementedError();
    }

    /**
     * Задача Иосифа Флафия.
     * Простая
     *
     * Образовав круг, стоят menNumber человек, пронумерованных от 1 до menNumber.
     *
     * 1 2 3
     * 8   4
     * 7 6 5
     *
     * Мы считаем от 1 до choiceInterval (например, до 5), начиная с 1-го человека по кругу.
     * Человек, на котором остановился счёт, выбывает.
     *
     * 1 2 3
     * 8   4
     * 7 6 х
     *
     * Далее счёт продолжается со следующего человека, также от 1 до choiceInterval.
     * Выбывшие при счёте пропускаются, и человек, на котором остановился счёт, выбывает.
     *
     * 1 х 3
     * 8   4
     * 7 6 Х
     *
     * Процедура повторяется, пока не останется один человек. Требуется вернуть его номер (в данном случае 3).
     *
     * 1 Х 3
     * х   4
     * 7 6 Х
     *
     * 1 Х 3
     * Х   4
     * х 6 Х
     *
     * х Х 3
     * Х   4
     * Х 6 Х
     *
     * Х Х 3
     * Х   х
     * Х 6 Х
     *
     * Х Х 3
     * Х   Х
     * Х х Х
     *
     * Общий комментарий: решение из Википедии для этой задачи принимается,
     * но приветствуется попытка решить её самостоятельно.
     */
    static public int josephTask(int menNumber, int choiceInterval) {
        throw new NotImplementedError();
    }

    /**
     * Наибольшая общая подстрока.
     * Средняя
     *
     * Дано две строки, например ОБСЕРВАТОРИЯ и КОНСЕРВАТОРЫ.
     * Найти их самую длинную общую подстроку -- в примере это СЕРВАТОР.
     * Если общих подстрок нет, вернуть пустую строку.
     * При сравнении подстрок, регистр символов *имеет* значение.
     * Если имеется несколько самых длинных общих подстрок одной длины,
     * вернуть ту из них, которая встречается раньше в строке first.
     */

    //T = O(n^2)
    //R = O(n^2)
    //  r t y u b n b p
    //t 0 1 0 0 0 0 0 0
    //u 0 0 0 1 0 0 0 0
    //b 0 0 0 0 2 0 1 0
    //n 0 0 0 0 0 3 0 0
    //r 1 0 0 0 0 0 0 0
    //i 0 0 0 0 0 0 0 0
    static public String longestCommonSubstring(String first, String second) {
        int[][] m = new int[first.length()][second.length()];
        int n_res = 0;
        int iEndRes = -1;
        for (int i = 0; i < first.length(); i++)
            for (int j = 0; j < second.length(); j++)
                if (first.charAt(i) == second.charAt(j)) {
                    if (i == 0 || j == 0) m[i][j] = 1;
                    else m[i][j] = m[i - 1][j - 1] + 1;
                    if (m[i][j] > n_res) {
                        n_res = m[i][j];
                        iEndRes = i;
                    }
                }
        if (iEndRes < 0) return "";
        iEndRes++;
        return first.substring(iEndRes - n_res, iEndRes);
    }

    /**
     * Число простых чисел в интервале
     * Простая
     *
     * Рассчитать количество простых чисел в интервале от 1 до limit (включительно).
     * Если limit <= 1, вернуть результат 0.
     *
     * Справка: простым считается число, которое делится нацело только на 1 и на себя.
     * Единица простым числом не считается.
     */

    // T = O(n ln ln n)
    // R = O(n)
    //алгоритм основан на решете Эратосфена
    static public int calcPrimesNumber(int limit) {
        if (limit < 2) return 0;
        int[] m = new int[limit + 1];
        for (int i = 2; i * i <= limit; i++)
            if (m[i] == 0)
                for (int j = i * i; j <= limit; j += i)
                    m[j] = 1;
        int res = 0;
        for (int i = 0; i <= limit; i++) res += m[i];
        res = limit - res - 1;
        return res;
    }
}
